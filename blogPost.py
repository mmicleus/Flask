#flask - module
#Flask - class
from flask import Flask, render_template,url_for,flash,redirect
#in the 'forms.py' file we have the 'RegistrationForm' and 'LoginForm' classes declared
from forms import RegistrationForm,LoginForm
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from models import User,Post


#This is the secret key that will help prevent cross-site request forging
#web pages that send requests to our web app will have to also send this key
#otherwise, the request will be aborted


#we now have an instantiated
#flask variable in the app variable
app = Flask(__name__)


app.config['SECRET_KEY'] = '24a07402c2a592ebfdb35efbe2f17e50'
#:/// - this url means that the 'site.db' file should be created in the current folder
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///site.db"

#now,have have an instance
db = SQLAlchemy(app)

#this is a constructor
#the 'route' function of the app variable
#is first called
#there's complicated back-end stuff
#going on under the hood
#the '/' represents the route page
#of the website

#an ORM uses classes to create tables
#each class represents a table
#it also contians a hidden method that creates a '.db' file based on the content of the class
#the created database will contain all the fields and relations specified in the class
#this method, which we've inherited from the 'db.Model' is called create_all()
#db.create_all()
#call this function from the python terminal in order to generate a '.db' file


class User(db.Model):
	id = db.Column(db.Integer,primary_key = True)
	username = db.Column(db.String(20), unique = True,nullable = False)
	email = db.Column(db.String(120), unique = True,nullable = False)
	#the image and the password will be hashed
	image_file = db.Column(db.String(20),nullable = False, default = 'default.jpg')
	password = db.Column(db.String(60),nullable = False)

	#this defines how the 'print' function should display objects of type 'User'
	def __repr__():
		return f"User({self.username}), '{self.email}' , '{self.image_file})' "

	#this model will establish a relationship with the 'Post' model
	#'lazy = True' means that SQL will load the data in one go
	#this is not a column
	#this just runs an additional query to get all the posts of each user


	#Explanation
	#Let's say we have users = User(username = 'John',email = 'Marcus@gmail.com',password = '123')
	#now ,user is an instance of the 'user' class
	#user.posts will display a list of all the 'post' objects that have this user's id as their foreign key
	#post.author will  be called on objects of type 'Post' and will return the 'User' Object 
	posts = db.relationship('Post', backref = 'author',lazy = True)



#this class will be used to create a table called 'Post'
#this class is called a 'model'

class Post(db.Model):
	id = db.Column(db.Integer,primary_key = True)
	title = db.Column(db.String(100),nullable = False)
	#don't put paranthesis at default because you don't want to call the function
	#all you want is to pass in the function to default
	#you always want to use utc for times in databases
	date_posted = db.Column(db.DateTime,nullable = False, default = datetime.utcnow)
	content = db.Column(db.Text, nullable = False)
	#this is going to be the primary key of the user
	user_id = db.Column(db.Integer, db.ForeignKey('user.id'),nullable =False)

	def __repr__():
		return f"Post({self.title}) {self.date_posted}"


posts = [ 
{
	'author' : 'Corey Schafer',
	'title'  :  'Blog Post 1',
	'content' : 'First Post content',
	'date_posted' : 'April 20, 2018'
},
{
	'author' : 'Jane',
	'title'  :  'Blog Post 2',
	'content' : 'Second Post content',
	'date_posted' : 'April 21, 2018'
}
]

@app.route("/")
@app.route("/home")
def home():
	return render_template('home.html',posts = posts)


@app.route('/about',methods = ['GET','POST'])
def about():
	return render_template('about.html')

@app.route('/register',methods = ['GET','POST'])
def register():
	#this class has been defined in 'forms.py'
	forms = RegistrationForm()
	#if the form submitted by the client met all the requirements
	if forms.validate_on_submit():
		flash("Account created for {dt} ".format(dt = forms.username.data), 'success')
		return redirect(url_for('home'))
	return render_template('register.html',form = forms)

@app.route('/login',methods = ['GET','POST'])
def login():
	#this class has been defined in forms.py
	forms = LoginForm()
	#if the form submitted by the user is valid
	if forms.validate_on_submit():
		if forms.username.data == 'admin@blog.com' and forms.password.data == 'password':
			#the flash function will insert a string in the template that will be generated by '/home'
			flash('you have been logged in!', 'success')
			#the url_for function will return the url that's tied to the 'def home' function
			return redirect(url_for('home'))
		else:
			flash('Login unsuccessful.Please check your username and password','danger')
			#this will be executed if we called the function with a 'GET' parameter or if login has been unsuccessful
	return render_template('login.html',form = forms)

#the __name__ variable is __main__
#if we run this script with python
#directly


if __name__ == '__main__':
	app.run(debug=True)